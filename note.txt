React主要有如下3个特点：

    1.作为UI(Just the UI)
    2.虚拟Dom
      这是一个亮点，是React最重要的一个特性，放进内存，最小更新的视图，差异部分更新，diff算法
    3.数据流(Data Flow) 单向数据流

学习React需要掌握哪些知识
      JSX
      ES6
      CSS+DIV  Js


Day01
      flex容器属性：

      1.display:

         display:flex   |  inline-flex

         块级伸缩容器        行内级伸缩容器

      2.flex-drection

          指定主轴的方向  flex-direction:row | row-reverse|column |column-reverse

      3.flex-wrap

          伸缩容器在主轴方向空间不足的情况下，是否换行以及如何换行

          flex-wrap:nowrap | wrap | wrap-reverse

       4.flex-flow


          是flex-direction和flex-wrap的缩写版本，它同时定义了伸缩容器的主轴和侧轴，其默认值为
          row nowrap

       5.justify-content：

           用来定义伸缩项目在主轴线的对其方式，语法为：

           justify-content:flex-start(默认值)|flex-end|center|space-between|space-around

       6.align-items 

            用来定义伸缩项目在交叉轴上的对其方式，语法为：

            align-items:flex-start|flex-end|center|baseline|stretch
       7.align-content

            用来调整伸缩项目出现换行后在交叉轴上的对其方式

            align-content:flex-start|flex-end|center|space-between|space-around|strtch(默认值)


    flexbox伸缩项目属性：

        1.order:定义项目的排列顺序，数值越小，排列越靠前，默认为0。语法为:order:整数值
        2.flex-grow:
            定义伸缩项目的放大比例，默认值为0，即表示如果存在默认空间.语法为：flex-grow:整数值
        3.flex-shrink
            定义伸缩项目的收索能力，默认值为1，其语法为：flex-shrink:整数值
        4.flex-basis
            用来设置伸缩项目的基准值，剩余的控件按比例进行伸缩，其语法为：flex-basis：length|auto
        5.flex
            2,3,4的缩写
        6.align-self
            用来设置单独的伸缩项目在交叉轴上的对齐方式，会覆盖默认的对齐方式，其语法为align-self:auto|flex-start|flex-end|center |baseline|stretch
            stretch(伸缩项目在交叉轴方向上占满伸缩容器，如果交叉轴为垂直方向的话，只有在不设置高度的情况下才能看到效果)

    在React Native中使用flexbox

        RN目前主要支持flexbox的如下6个属性
        1.alignItems
        用来定义伸缩项目在交叉轴上的对其方式，语法为：
            alignItems:flex-start|flex-end|center|stretch
        2.alignSelf
        用来设置单独的伸缩项目在交叉轴上的对齐方式，会覆盖默认的对齐方式，其语法为align-self:auto|flex-start|flex-end|center|stretch
        stretch(伸缩项目在交叉轴方向上占满伸缩容器，如果交叉轴为垂直方向的话，只有在不设置高度的情况下才能看到效果)
        3.flex
            flex
            2,3,4的缩写
        4.flexDirection
            指定主轴的方向  flex-direction:row | row-reverse|column |column-reverse
            默认值是column
        5.flexWrap
            伸缩容器在主轴方向空间不足的情况下，是否换行以及如何换行

            flex-wrap:nowrap | wrap | wrap-reverse
        6.justifyContent

            用来调整伸缩项目出现换行后在交叉轴上的对其方式

            align-content:flex-start|flex-end|center|space-between|space-around|strtch(默认值)

    
      JSX入门
        
        React是由ReactJS和React Native构成的，其中ReactJs是facebook的一个前端开源框架，React Native是ReactJs思想上Native的体现

        JSX并不是一门语言，仅仅是一个语法糖，允许开发者在javascript中书写html语法，最后每个html标签都转化为javascript来运行。

        1.环境：

        2.载入方式：

        3.标签：Html标签和ReactJs自定义标签(首字母一定要大写)

        4.转换 解析器

        <h3>输入</h3> 转换成：React.createElement("h3",null,"输入") 返回一个ReactElement对象给我们。

        5.执行Javascript表达式

        6.注释

        7.属性：

            var msg = <h1 width="10px">react</h1>

            React.createElement("h1",{width:"10px"},"react");
        
        8.延展属性：

            使用ES6语法

            var  props={};
            props.foo = "1";
            props.bar = "1";

            <h1 {...props} foo="2">欢迎关注我的微信号</h1> 转化成

            React.createElement("h1",React.__spread({},props,{foo:"2"}),"欢迎关注我的微信号")；
        
        9.自定义属性(HTML5给出了方案，凡是以data-开头的自定义属性，可渲染到页面)
        
        10.显示HTML 显示一段HTML字符串，而不是html页面
        
            借助一个属性_html

            <div>{{_html:'<h1>欢迎关注我的微信号</h1>'}}</div>

        11.样式的使用

            style属性    js对象 外层{}按照JSX语法 内层{}是js的对象

        12.事件绑定

            注意：驼峰 onClick

        
    
        Day02

            React是全局对象  顶层API与组件API

            React.creatClass创建组件类的方法

            React.reader渲染，将指定组件渲染到指定DOM节点上


            render：组件级API，返回组件的内部结构。

            React.render 被ReactDOM.render替代


        ReactJS实战之ReactJS组件生命周期

            1.创建阶段

                getDefaultProps：处理props的默认值 在React.createClass调用

            2.实例化阶段

                React.reader() 启动之后

                getInitialState ,componentWillmount ,render ,componentDidmount

                state:组件的属性，主要是用来存储组件自身需要的数据，每次数据的更新都是通过修改state属性的值，ReactJs内部
                会监听state属性的变化，一旦发生变化的话，就会主动触发组件的render方法来更新虚拟DOM结构

                虚拟DOM(内存)：将真实的DOM结构映射成一个Json数据结构。

            3.更新阶段

                主要发生在用户操作之后或父组件有更新的时候，此时会根据用户的操作行为响应的页面结构的调整

                componentWillReceiveProps shouldComponentUpdate componentWillUpdate render(diff算法) componentDidUpdate



            4.销毁阶段

                componentWillUnmount

        
        ReactJs组件通讯

                ReactJs组件关系是一层套一层，DOM结构组织结构比较清晰

                父组件  子组件

                1.子组件如何调用父组件的方法

                2.父组件如何调用子组件

                首先用属性ref给子组件取个名字

                this.ref.名字.getDOMNode()


         React Native JSX

                React Native 中没有DOM的概念，只有组件的概念，所以我们在ReactJs中使用的HTML标签以及对DOM的操作是不起作用的，
                但是组件的生命周期，JSX的语法，事件绑定，自定义属性等，在RN和ReactJs中是一样的。

        
        React Native 之View组件

                在React Native里面有一个类似于div的组件，那就是View组件，支持多层嵌套，支持flexbox布局

                实例步骤：

                1.加载View组件

                2.创建组件

                3.添加样式表

                4.注册入口

                5.外层布局

                6.flexbox水平三栏布局

                7.上下两栏布局

                8.完善效果


        Day03   

            Text组件主要用于显示文本;具有相应性，可以嵌套，可以继承样式

            内部Text组件可以继承外部Text组件的样式

            Text组件的特性：

                1.onPress

                2.numberOfLines 最多显示多少行

                3.onLayout

                //案例，新闻客户端


            Navigator:

                一个应用往往是由多功能的视图组成的！多页面的切换：路由或导航

                在RN中专门负责视图切换的组件：Navigator，NavigatorIOS

                Navigator和NavigatorIOS都可以用来管理应用中“场景的”导航(也可以称作屏幕)，导航器建立了一个路由栈，用来弹出，推入或者
                替换路由状态。他们和html5中的history API很相似。主要区别在于NavigatorIOS使用了IOS中的UINavigationController类，而
                Navigator则完全用js重写了一个类似功能的React组件。

                导航器通过路由对象来分辨不同的场景。利用renderScene方法，导航栏可以根据指定的路由来渲染场景。
                可以通过configurScene属性获取指定路由对象的配置信息，从而改变场景的动画或者手势

                最后的几行：
                  renderScene={
            (route, navigator) =>
             {
            let Component = route.component;
            return <Component {...route.params} navigator={navigator} 

                先看到回调里的两个参数是route，navigator，通过打印我们发现route里其实就是我们传递的name，component这两个货，navigator是一个
                Navigator的对象，为什么呢，因为它由push，pop，jump。。。等方法，这是我们等下用来跳转页面用的那个navigator对象。

                return <Component {...route.params} navigator={navigator}>这里有一个判断，也就是如果传递进来的component存在，那我们
                就是返回一个这个component，结合前面initalRoute 的参数，我们就知道，这是一个会被render出来给用户看的component，然后navigator
                作为props传递给了和这个component



            navigator的参数传递：


            Demo4:TextInput

                文本输入框：基本组件 自动补全的搜索功能

                TextIntput的主要属性和事件如下：

                autoCapitalize:枚举类型，可选值有  none   sentences   words characters当用户输入时，用于提示

                placeHolder:占位符，在输入前显示的文本内容

                value：文本输入框个默认值

                placeHolderTextColor：占位符文本的颜色

                password：boolean类型  true表示密码输入显示

                multiline：多行输入

                editable：文本框是否可输入

                autoFocus:自动聚焦

                clearButtonMode：枚举类型，never  while-editing  unless-editing  always用于显示清除按钮

                maxLength：能够输入的最长的字符数

                enablesReturnKeyAutomativally：如果为true 表示没有文本时键盘是不能有返回键的，其默认值为false

                returnKeyType：枚举类型  default go google jion  next route  search send  yahoo done
                emergency-call  表示软键盘返回键显示的字符串

                secureTextEntry：隐藏输入内容，默认值为false

                onChangeText：当文本输入框的内容变化时，调用该函数；onChangeText接收一个文本的参数对象

                onChange：当文本变化时，调用该函数

                onEndEditing：当结束编辑时，调用该函数

                onBlur：失去焦点触发事件

                onFocus:获取焦点时触发事件


                
































